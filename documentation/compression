Compression algorithm was designed with purpose of being very short for many points.
This is not designed based on a heavy mathematical ground but on some quick pragmatic approach.

bitsize of encoding  3 6 14 30 64

3bits
/*  size == 3 example :
           X - >
         Y 0 1 2        00  01  10
         | 3 . 4        11   . 100 
         v 5 6 7       101 110 111
         specific application of general case bellow.
*/

3bits is a special case where central point is skipped.

6,14,30,64bits
      /*    X ->
          Y        0
          | 0    center     max
          v        max

            0      1      2   ...center....                   (max - 1)
           max                                               2 * max - 1
            .                    (0,0)  center  * ( max + 1)
           (max-1)*max -1                                    (max ^ 2) - 1
2       */


[n=number of points (32)]
[from Point (64)]
[relsize(64,|delta[1]|)][delta[1]]
[relsize(|delta[1]|,|delta[2]|][delta[2]]
...
[relsize(|delta[n-1]|,|delta[n]|)][delta[n]]
[PAD2WORD]

bit size encoding is relative to previous bitsize encoding

    /* 11 : next, 10 : previous ; 0* : same
        6 -> 14->30
        ^        |
        |        v
        3   <-   64
    */

0 same			0
1 next			110
2 next next 		11110
3 previous previous  	10100
4 previous 		100


UNUSED values for encoding can be reused form other purposes : ex attributes.

What are UNUSED values ?

--------------------------------------------------------------------------
3bits)

All values are used.

--------------------------------------------------------------------------
6bits)

center = ( sqrt(size) - 1 ) / 2 = ( 2^3 - 1 ) / 2 =  ( 7 / 2) = 3.

-3,-2,-1, 0 1 2 3 4
0   1  2  3 4 5 6 7

(-1,0,1)x(-1,0,1) can be reinjected.
missing is column -4 and row -4 => missing 15 values.

seems Kompressor code will miss row 4 and column 4 too

(x,y) in (-1,1)x(-1,1) already covered by 3bits or prohibited (0,0) : ie 9 values unused / 64

=> center=3, line=8

for y=-1 x in (-1,1) => ((3-1)*8==16)+(2,3,4) = 18,19,20
for y=0 x in (-1,1) => 24+(2,3,4) = 26,27,28
for y=1 x in (-1,1) => 32+(2,3,4) = 34,35,36

(0..7)x(0..7) => (-3,4)x(-3,4)

----------------------------------------------------------------------------
14bits)

(x,y) in (-3,4)x(-3,4) UNUSED =>  ie 64 / 16384 => does NOT exists ... , 0..16383 = 128 x 128 (0..127) x (0..127) => (-126,127) x (-126,127)
=> center=31, line=64

for y=-3 x in (-3,4) => ((31-3)*64==...)+(28,35) =
for y=-2 x in (-3,4) => ((31-3)*64==...)+(28,35) = 
for y=-1 x in (-3,4) => ((31-1)*64==1920)+(28,35) = (1948..1955)
for y=0 x in (-3,4) => ((31*64)==1984)+(28,35) = (2012..2019)
for y=1 x in (-3,4) => ...
for y=2 x in (-3,4) => ((31-3)*64==...)+(28,35) =
for y=3 x in (-3,4) => ((31-3)*64==...)+(28,35) =
for y=4 x in (-3,4) => ((31-3)*64==...)+(28,35) =

------------------------------------------------------------------------------
30bits : 1073741824 (0..32768)x(0..32768)


